package io.cdap.plugin.common.stepsdesign;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.api.gax.paging.Page;
import com.google.cloud.storage.BlobId;
import com.google.cloud.storage.Storage;
import com.google.cloud.storage.StorageOptions;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import io.cdap.plugin.gcp.common.SourceOutputFormatProvider;
import io.cucumber.java.en.Then;

import java.io.FileReader;
import java.io.IOException;

import com.google.cloud.storage.Blob;
import com.google.cloud.storage.StorageException;
import io.cdap.e2e.utils.CdfHelper;
import io.cdap.e2e.utils.PluginPropertyUtils;
import io.cdap.e2e.utils.StorageClient;
import io.cucumber.java.en.Then;
import kafka.utils.Json;
import org.apache.directory.api.util.Strings;
import org.apache.spark.sql.execution.columnar.NULL;
import org.junit.Assert;
import stepsdesign.BeforeActions;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

public class GCS {
  private static final Gson gson = new Gson();

//  public static void main(String[] args) throws IOException {
//    validateOutputFileGeneratedByGCSSinkPluginIsEqualToExpectedOutputFile("BQToDBAllDataTypes");
//  }

  public static boolean validateJsonArray(JsonArray v1, JsonArray v2) {
    if (!(v1.size() == v1.size())) return false;
    for (int i = 0; i < v1.size(); i++) {
      if (!validateJsonElement(v1.get(i), v2.get(i))) return false;
    }
    return true;
  }

  public static boolean validateJsonPrimitive(JsonElement v1, JsonElement v2) {
    // TODO Update this later to a different function
    return v1.getAsString().equals(v2.getAsString());
  }

  public static boolean validateJsonElement(JsonElement v1, JsonElement v2) {
    // Taking v1 as source of truth
    if (v1.isJsonObject()) {
      // Base case of checking v2
      if (!v2.isJsonObject()) return false;
      return validateJsonObject(v1.getAsJsonObject(), v2.getAsJsonObject());

    } else if (v1.isJsonArray()) {
      if (!v2.isJsonArray()) return false;
      return validateJsonArray(v1.getAsJsonArray(), v2.getAsJsonArray());

    } else if (v1.isJsonPrimitive()) {
      if (!v2.isJsonPrimitive()) return false;
      return validateJsonPrimitive(v1, v2);

    } else if (v1.isJsonNull()) {
      if (!v2.isJsonNull()) return false;
      return true;
    }
    return false;
  }

  public static boolean validateJsonObject(JsonObject v1, JsonObject v2) {
    for (Map.Entry<String, JsonElement> entry : v1.entrySet()) {
      String key = entry.getKey();
      JsonElement fileValue = v1.get(key);
      JsonElement gcsValue = v2.get(key);
      if (!validateJsonElement(fileValue, gcsValue)) return false;
    }
    return true;
  }

  @Then("Validate output file generated by GCS sink plugin is equal to expected output file {string}")
  public static void validateOutputFileGeneratedByGCSSinkPluginIsEqualToExpectedOutputFile(String jsonFile) throws
    IOException {
    String projectId = PluginPropertyUtils.pluginProp("projectId");
    String bucketName =TestSetupHooks.gcsTargetBucketName;
    List<String> bucketObjectNames = new ArrayList<>();
    Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();
    Page<Blob> blobs = storage.list(bucketName);
    List<Blob> bucketObjects = StreamSupport.stream(blobs.iterateAll().spliterator(), true)
      .filter(blob -> blob.getSize() != 0)
      .collect(Collectors.toList());
    Stream<String> objectNamesWithData = bucketObjects.stream().map(blob -> blob.getName());
    objectNamesWithData.forEach(objectName -> bucketObjectNames.add(objectName));
    for (String objectName : bucketObjectNames) {
      BlobId blobId = BlobId.of(bucketName, objectName);
      Blob blob = storage.get(blobId);
      String[] gcsStrings = new String(blob.getContent()).split("\n");
      String[] fileStrings = null;
      try {
        String filePath = "C:/Users/ishak/Downloads/google-cloud/src/e2e-test/resources/testdata/GCS/ExpectedOutputs/" + jsonFile + ".json";
        fileStrings = new String(Files.readAllBytes(Paths.get(filePath))).split("\n");
      } catch (IOException e) {
        System.out.println("Error reading file: " + e.getMessage());
      }
      try {
        for (int i = 0; i <= gcsStrings.length - 1; i++) {
          JsonObject gcsObject = gson.fromJson(gcsStrings[i], JsonObject.class);
          JsonObject fileObject = gson.fromJson(fileStrings[i], JsonObject.class);
          System.out.println(gcsObject);
          System.out.println(fileObject);
        }
        }
      catch(JsonParseException e){
        e.printStackTrace();
      }
    }
    }
  }
